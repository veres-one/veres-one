#!/usr/bin/env bash
#
# Setup the network configuration for a Veres One Node

user=`whoami`
if [ "$user" != "root" ]; then
  echo "ERROR: This script must be run as the 'root' user."
  exit 0
fi

echo "This script will setup your Veres One Node to operate on the Internet."
echo ""
echo "The following software will be configured: "
echo "   nodejs, redis, mongodb, nginx, letsencrypt, and veres-one"
echo ""
echo "What is the fully qualified hostname for this server?"
echo "  For example: node.example.com"
echo -n "Hostname: "
read hostname

echo ""
echo "What email address is associated with this domain?"
echo "  For example: jdoe@example.com"
echo -n "Email: "
read email

echo "Veres One Node configuration:\n"
echo ""
echo "  Hostname  : $hostname"
echo "  Email     : $email"
echo ""
echo "WARNING: This setup will overwrite default configuration files"
echo ""
echo -n "Do you want to continue with these settings? "
read do_setup

if [ "$do_setup" != "y" -a "$do_setup" != "Y" ]; then
  echo "Aborting setup."
  exit 0
fi

######################### Setup Host ###########################
hostname $hostname
echo $hostname > /etc/hostname
sed -i -e "1 s/^.*$/127.0.0.1 localhost $hostname/" /etc/hosts
echo "Veres One Node Configuration" > /root/veres-one.config

######################### Prepare Utils ###########################
apt-get -y update
apt-get -y autoremove
apt-get -y install pwgen

######################### Setup Node.js ###########################
curl -sL https://deb.nodesource.com/setup_8.x | bash
apt-get -y install nodejs build-essential

######################### Setup Redis ###########################
add-apt-repository -y ppa:chris-lea/redis-server
apt-get -y update
apt-get -y install redis-server

cat >/etc/redis/redis.conf <<EOF
bind 127.0.0.1
protected-mode yes
port 6379
tcp-backlog 511
timeout 0
tcp-keepalive 300
daemonize yes
pidfile /var/run/redis/redis-server.pid
supervised systemd
loglevel notice
logfile /var/log/redis/redis-server.log
databases 16
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir /var/lib/redis
slave-serve-stale-data yes
slave-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-disable-tcp-nodelay no
slave-priority 100
appendonly no
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events ""
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes
EOF

service restart redis
redis-cli flushall

######################### Setup MongoDB ###########################
mongodb_database='veres_one_testnet';
mongodb_admin_secret=`pwgen -s 32`
mongodb_user='veresone';
mongodb_user_secret=`pwgen -s 32`
echo "mongodb_admin_password: $mongodb_admin_secret" > /root/veres-one.config

apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list
apt-get update
apt-get install -y mongodb-org

# FIXME: Remove wipe mongo DB commands
service mongod stop
sed -i -e "s/security://" /etc/mongod.conf
sed -i -e "s/authorization: enabled//" /etc/mongod.conf
rm -rf /var/lib/mongodb/*
service mongod start
sleep 5

mongo --eval "db = db.getSiblingDB('admin'); db.createUser({user: \"admin\",
    pwd: \"$mongodb_admin_secret\",
    roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]
  }
);"

cat >/etc/mongod.conf <<EOF
storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: true

systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

security:
  authorization: enabled

net:
  port: 27017
  bindIp: 127.0.0.1
EOF

service mongod restart

######################### Setup Nginx ###########################
apt-get -y install nginx

# setup letsencrypt snippet
cat >/etc/nginx/snippets/letsencrypt.conf <<EOF
location ^~ /.well-known/acme-challenge/ {
  default_type "text/plain";
  root /var/www/letsencrypt;
}
EOF

# setup ssl snippet
cat >/etc/nginx/snippets/ssl.conf <<EOF
ssl_session_timeout 1d;
ssl_session_cache shared:SSL:50m;
ssl_session_tickets off;

ssl_protocols TLSv1.2;
ssl_ciphers EECDH+AESGCM:EECDH+AES;
ssl_ecdh_curve secp384r1;
ssl_prefer_server_ciphers on;

ssl_stapling on;
ssl_stapling_verify on;

add_header Strict-Transport-Security "max-age=15768000; includeSubdomains; preload";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
EOF

# create challenge directory
mkdir -p /var/www/letsencrypt/.well-known/acme-challenge

# setup nginx website
cat >/etc/nginx/sites-available/$hostname.conf <<EOF
## http://$hostname redirects to https://$hostname
server {
	listen 80;
	listen [::]:80;
	server_name $hostname;

	include /etc/nginx/snippets/letsencrypt.conf;

	location / {
		return 301 https://$hostname$request_uri;
	}
}

## Server for https://$hostname
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name $hostname;

	ssl_certificate /etc/letsencrypt/live/$hostname/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/$hostname/privkey.pem;
	ssl_trusted_certificate /etc/letsencrypt/live/$hostname/fullchain.pem;

	include /etc/nginx/snippets/ssl.conf;

	location / {
    proxy_pass https://127.0.0.1:10443$uri$is_args$args;
	}
}
EOF

## Serves https://$hostname
# setup Let's Encrypt bootstrapping nginx website
cat >/etc/nginx/sites-available/default <<EOF
server {
	server_name $hostname;
	listen 80;
	listen [::]:80;
	server_name $hostname;

	include /etc/nginx/snippets/letsencrypt.conf;

	root /var/www/html;
	index index.html;
	location / {
		try_files $uri $uri/ =404;
	}
}
EOF

# Setup certbot and retrieve the certificate
apt-get install -y software-properties-common
add-apt-repository -y ppa:certbot/certbot
apt-get update
apt-get install -y certbot

# Restart http-only server to fetch cert
ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/
service nginx restart
certbot certonly --webroot --agree-tos --no-eff-email --email $email -w /var/www/letsencrypt -d $hostname

# Disable default site, enable HTTPS-only mode
rm /etc/nginx/sites-enabled/default
ln -sf /etc/nginx/sites-available/$hostname.conf /etc/nginx/sites-enabled/
service nginx restart

######################### Setup Veres One Node ###########################

mkdir -p /var/log/veres-one
chown -R veres-one:veres-one /var/log/veres-one
chown -R veres-one:veres-one /home/veres-one

# setup node configuration
express_secret=`pwgen -s 32`
ledger_id='did:v1:uuid:00000000-0000-0000-0000-000000000000';
peers=$(cat <<EOF
[
  'https://genesis.testnet.veres.one/'
]
EOF
)

# Generate a secure Veres One Admin passphrase
veres_one_secret=`pwgen -s 32`

cat >/home/veres-one/veres-one/$hostname.js <<EOF
/*!
 * Copyright (c) The Veres One Project. All rights reserved.
 */
const bedrock = require('bedrock');

require('./lib/index');

const config = require('bedrock').config;
const fs = require('fs');
const os = require('os');
const path = require('path');

// FIXME: Fix for nginx-proxied nodes for node.js 8.x.x
const tls = require('tls');
tls.DEFAULT_ECDH_CURVE = 'auto';

// common paths
config.paths.cache = path.join(__dirname, '.cache');
config.paths.log = path.join('/var', 'log', 'veres-one');
config.paths.secrets = path.join(__dirname, 'configs', 'secrets');

// core
// 0 means use # of cpus
config.core.workers = 0;
config.core.master.title = 'veres-one-1d';
config.core.worker.title = 'veres-one-1d-worker';
config.core.worker.restart = true;

// logging
config.loggers.email.silent = true;
config.loggers.email.to = ['$email'];
config.loggers.email.from = 'veres-one-node@$hostname';

// server info
config.server.port = 10443;
config.server.httpPort = 10080;
config.server.domain = '$hostname';
config.server.host = config.server.domain;

// express info
config.express.session.secret = '$express_secret';
config.express.session.key = 'veres-one.sid';
config.express.session.prefix = 'veres-one.';

// mongodb config
config.mongodb.name = '$mongodb_database';
config.mongodb.host = 'localhost';
config.mongodb.port = 27017;
config.mongodb.local.collection = '$mongodb_database';
config.mongodb.username = '$mongodb_user';
config.mongodb.password = '$mongodb_user_secret';
config.mongodb.adminPrompt = true;

config['https-agent'].rejectUnauthorized = false;

// mail config
config.mail.connection = {
  host: 'localhost',
  ssl: false
};
config.mail.send = false;
config.mail.vars = {
  productionMode: config.views.vars.productionMode,
  baseUri: config.server.baseUri,
  subject: {
    prefix: '[VERES ONE] ',
    identityPrefix: '[VERES ONE] '
  },
  service: {
    name: 'Veres One',
    host: config.server.host
  },
  system: {
    name: 'System',
    email: 'support@' + config.server.domain
  },
  support: {
    name: 'Customer Support',
    email: 'support@' + config.server.domain
  },
  registration: {
    email: 'registration@' + config.server.domain
  },
  comments: {
    email: 'support@' + config.server.domain
  },
  offers: {
    email: 'support@' + config.server.domain
  },
  machine: require('os').hostname()
};
// email templates
// TODO: determine if Ledger will do credential notifications at all
const ids = [
  'veres.Credential.created-identity',
  'veres.Credential.created'
];
ids.forEach(function(id) {
  config.mail.templates.config[id] = {
    filename: path.join(__dirname, '../email-templates', id + '.tpl')
  };
});
// mail events
config.mail.events.push({
  type: 'veres.Credential.created',
  // admin email
  template: 'veres.Credential.created'
});
config.mail.events.push({
  type: 'veres.Credential.created.notification',
  // user email
  template: 'veres.Credential.created-identity'
});

// views
// branding
config.views.brand.name = 'Veres One';
// update view vars
config.views.vars.baseUri = config.server.baseUri;
config.views.vars.title = config.views.brand.name;
config.views.vars.siteTitle = config.views.brand.name;
config.views.vars.supportDomain = config.server.domain;
config.views.vars.debug = false;
config.views.vars.minify = false;
config.views.vars.demoWarningUrl = null;
// br-form vocabularies
config.views.vars.forms = {vocabs: []};
// contact info
config.views.vars.contact.address = {
  label: 'Veres One',
  address:
    '123 FIXME\n' +
    'FIXME, XX 12345\n' +
    'United States of America',
  htmlAddress:
    '123 FIXME<br/>' +
    'FIXME, XX 12345<br/>' +
    'United States of America'
};
config.views.vars.contact.email = {
  label: 'Customer Support',
  url: 'mailto:support@' + config.server.domain,
  email: 'support@' + config.server.domain
};

// REST API documentation
config.docs.vars.brand = config.brand.name;
config.docs.vars.baseUri = config.server.baseUri;

// Veres One development config
config['veres-one'].did = '$ledger_id';
config['veres-one'].peers = $peers;

// enable consensus workers
config.ledger.jobs.scheduleConsensusWork.enabled = true;

// use quick equihash setting for development
config['veres-one-validator'].equihash.equihashParameterN = 64;
config['veres-one-validator'].equihash.equihashParameterK = 3;

config['veres-one'].adminPassphrase = '$veres_one_secret';

bedrock.start();
EOF

####################### Setup rc.local #########################

cat >/etc/rc.local <<EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.

sysctl -w net.core.somaxconn=65535

if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
   echo never > /sys/kernel/mm/transparent_hugepage/enabled
fi
if test -f /sys/kernel/mm/transparent_hugepage/defrag; then
   echo never > /sys/kernel/mm/transparent_hugepage/defrag
fi

exit 0
EOF

chmod 755 /etc/rc.local
sh /etc/rc.local

####################### Setup systemd #########################

echo "Setting up systemd scripts to run Veres One Node"

cat >/lib/systemd/system/$hostname.service <<EOF
[Service]
ExecStart=/usr/bin/node /home/veres-one/veres-one/$hostname
WorkingDirectory=/home/veres-one
Restart=always
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=veres-one
User=veres-one
Group=veres-one
Environment=NODE_ENV=production

[Install]
WantedBy=multi-user.target
EOF

systemctl enable $hostname.service

echo "systemd for Veres One complete."

####################### Complete install #########################

echo "Veres One Node setup successful!"
echo ""
echo "DO NOT RUN THE NODE AS ROOT!"
echo ""
echo "Log in as veres-one: su - veres-one"
echo "Go to home directory: cd /home/veres-one/veres-one/"
echo "To run the node: nodejs /home/veres-one/veres-one/$hostname.js"
echo ""
echo "When prompted for the mongodb admin, type   : admin"
echo "When prompted for the mongodb password, type: $mongodb_admin_secret"
echo ""
echo "After consensus process shows blocks, CTRL-C and then do the following:"
echo ""
echo "systemctl start $hostname"
